name: 'Indexer CI/CD Pipeline'

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  RUST_VERSION: '1.80'
  CARGO_TERM_COLOR: always
  
jobs:
  pre-checks:
    name: 'Pre-flight Checks'
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-branch.outputs.should-deploy }}
      git-sha: ${{ steps.vars.outputs.git-sha }}
      timestamp: ${{ steps.vars.outputs.timestamp }}
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '[INFO] : Set pipeline variables'
        id: vars
        run: |
          echo "[INFO] : Setting pipeline variables"
          echo "git-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "[INFO] : Git SHA: $(git rev-parse --short HEAD)"
          echo "[INFO] : Timestamp: $(date -u +%Y%m%d-%H%M%S)"

      - name: '[INFO] : Check deployment eligibility'
        id: check-branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "[INFO] : Branch eligible for deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "[INFO] : Branch not eligible for deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  workspace-validation:
    name: 'Workspace Validation'
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Setup Rust toolchain'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: '[INFO] : Validate workspace structure'
        run: |
          echo "[INFO] : Validating Cargo workspace structure"
          if [[ ! -f "Cargo.toml" ]]; then
            echo "[ERROR] : Main Cargo.toml not found"
            exit 1
          fi
          
          # Check workspace members
          if grep -q "members" Cargo.toml; then
            echo "[INFO] : Workspace members found"
            cargo metadata --format-version 1 | jq -r '.workspace_members[]' || echo "[WARN] : Failed to parse workspace metadata"
          fi
          
          echo "[INFO] : Workspace validation completed"

      - name: '[INFO] : Check configuration files'
        run: |
          echo "[INFO] : Checking configuration files"
          if [[ -f "config.example.yaml" ]]; then
            echo "[INFO] : Example configuration found"
          else
            echo "[WARN] : No example configuration found"
          fi
          
          if [[ -f "config.yaml" ]]; then
            echo "[INFO] : Configuration file present"
          else
            echo "[WARN] : No configuration file found"
          fi

  code-quality:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    needs: [pre-checks, workspace-validation]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: indexer_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: indexer_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Setup Rust toolchain'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: '[INFO] : Setup Rust cache'
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: indexer-workspace

      - name: '[INFO] : Check code formatting'
        run: |
          echo "[INFO] : Checking Rust code formatting"
          if ! cargo fmt --all -- --check; then
            echo "[ERROR] : Code formatting check failed"
            echo "[ERROR] : Run 'cargo fmt' to fix formatting issues"
            exit 1
          fi
          echo "[INFO] : Code formatting is correct"

      - name: '[INFO] : Run Clippy linting'
        run: |
          echo "[INFO] : Running Clippy linting"
          if ! cargo clippy --workspace --all-targets --all-features -- -D warnings; then
            echo "[ERROR] : Clippy linting failed"
            exit 1
          fi
          echo "[INFO] : Clippy linting passed"

      - name: '[INFO] : Security audit'
        run: |
          echo "[INFO] : Running security audit"
          cargo install --quiet cargo-audit || echo "[WARN] : Failed to install cargo-audit"
          if command -v cargo-audit >/dev/null 2>&1; then
            if ! cargo audit; then
              echo "[WARN] : Security vulnerabilities found"
            else
              echo "[INFO] : No security vulnerabilities found"
            fi
          else
            echo "[WARN] : cargo-audit not available, skipping security scan"
          fi

      - name: '[INFO] : Check dependencies'
        run: |
          echo "[INFO] : Checking dependency licenses and versions"
          cargo tree --duplicates || echo "[WARN] : Failed to check duplicate dependencies"
          
          # List all dependencies
          echo "[INFO] : Listing all workspace dependencies"
          cargo tree --workspace | head -50

  build-test:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    needs: [pre-checks, code-quality]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: indexer_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: indexer_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Setup Rust toolchain'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: '[INFO] : Setup Rust cache'
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: indexer-workspace-build

      - name: '[INFO] : Install system dependencies'
        run: |
          echo "[INFO] : Installing system dependencies"
          sudo apt-get update
          sudo apt-get install -y libpq-dev pkg-config

      - name: '[INFO] : Install diesel CLI'
        run: |
          echo "[INFO] : Installing diesel CLI for database operations"
          cargo install --quiet diesel_cli --no-default-features --features postgres

      - name: '[INFO] : Setup test database'
        env:
          DATABASE_URL: postgres://indexer_test:test_password@localhost:5432/indexer_test_db
        run: |
          echo "[INFO] : Setting up indexer test database"
          
          # Run migrations if they exist
          if [[ -d "migrations" ]]; then
            echo "[INFO] : Running database migrations"
            if ! diesel migration run; then
              echo "[ERROR] : Failed to run database migrations"
              exit 1
            fi
          else
            echo "[WARN] : No migrations directory found"
          fi
          
          echo "[INFO] : Database setup completed"

      - name: '[INFO] : Build workspace'
        run: |
          echo "[INFO] : Building entire workspace in debug mode"
          if ! cargo build --workspace --verbose; then
            echo "[ERROR] : Debug build failed"
            exit 1
          fi
          echo "[INFO] : Debug build completed successfully"

      - name: '[INFO] : Run tests'
        env:
          DATABASE_URL: postgres://indexer_test:test_password@localhost:5432/indexer_test_db
          RUST_LOG: debug
        run: |
          echo "[INFO] : Running workspace tests"
          if ! cargo test --workspace --verbose; then
            echo "[ERROR] : Tests failed"
            exit 1
          fi
          echo "[INFO] : All tests passed"

      - name: '[INFO] : Build release binary'
        run: |
          echo "[INFO] : Building optimized release binary"
          if ! cargo build --release --verbose; then
            echo "[ERROR] : Release build failed"
            exit 1
          fi
          echo "[INFO] : Release build completed successfully"
          
          # Check binary size and location
          find target/release -name "kizo-indexer" -type f -executable | head -5 | while read binary; do
            echo "[INFO] : Built binary: $binary ($(du -h "$binary" | cut -f1))"
          done

      - name: '[INFO] : Upload build artifacts'
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: indexer-build-${{ needs.pre-checks.outputs.git-sha }}
          path: |
            target/release/kizo-indexer
            Cargo.toml
            Cargo.lock
            config.example.yaml
          retention-days: 7

  docker-build:
    name: 'Docker Build & Scan'
    runs-on: ubuntu-latest
    needs: [pre-checks, build-test]
    if: needs.pre-checks.outputs.should-deploy == 'true'
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: '[INFO] : Build Docker image'
        run: |
          echo "[INFO] : Building Docker image"
          IMAGE_TAG="kizo-indexer:${{ needs.pre-checks.outputs.git-sha }}"
          if ! docker build -t $IMAGE_TAG -f Dockerfile .; then
            echo "[ERROR] : Docker build failed"
            exit 1
          fi
          echo "[INFO] : Docker image built: $IMAGE_TAG"
          
          # Check image size
          docker images $IMAGE_TAG --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          
          # Save image info
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: '[INFO] : Test Docker image'
        run: |
          echo "[INFO] : Testing Docker image basic functionality"
          
          # Run basic container test
          if docker run --rm ${{ env.IMAGE_TAG }} --version >/dev/null 2>&1; then
            echo "[INFO] : Docker container runs successfully"
          else
            echo "[WARN] : Docker container version check failed"
          fi

      - name: '[INFO] : Scan Docker image for vulnerabilities'
        run: |
          echo "[INFO] : Scanning Docker image for security vulnerabilities"
          # Install Trivy
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          
          # Run security scan
          if trivy image --severity HIGH,CRITICAL --exit-code 1 ${{ env.IMAGE_TAG }}; then
            echo "[INFO] : No critical vulnerabilities found"
          else
            echo "[WARN] : Critical vulnerabilities found in Docker image"
          fi

  deploy:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [pre-checks, docker-build]
    if: needs.pre-checks.outputs.should-deploy == 'true'
    environment:
      name: production
      url: 'https://your-indexer-domain.com'
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Validate deployment secrets'
        run: |
          echo "[INFO] : Validating required secrets"
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then
            echo "[FATAL] : VPS_HOST secret is missing"
            exit 1
          fi
          if [[ -z "${{ secrets.VPS_USERNAME }}" ]]; then
            echo "[FATAL] : VPS_USERNAME secret is missing"
            exit 1
          fi
          if [[ -z "${{ secrets.VPS_SSH_KEY }}" ]]; then
            echo "[FATAL] : VPS_SSH_KEY secret is missing"
            exit 1
          fi
          echo "[INFO] : All required secrets are present"

      - name: '[INFO] : Deploy to VPS'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          command_timeout: 25m
          script: |
            set -e
            
            echo "[INFO] : Starting indexer deployment process"
            echo "[INFO] : Git SHA: ${{ needs.pre-checks.outputs.git-sha }}"
            echo "[INFO] : Timestamp: ${{ needs.pre-checks.outputs.timestamp }}"
            
            # Navigate to project directory
            cd /home/kizovps/kizo/indexer || {
              echo "[FATAL] : Cannot access indexer directory"
              exit 1
            }
            
            # Pull latest changes
            echo "[INFO] : Pulling latest changes from repository"
            if ! git fetch origin; then
              echo "[ERROR] : Failed to fetch from origin"
              exit 1
            fi
            
            if ! git reset --hard origin/master; then
              echo "[ERROR] : Failed to reset to origin/master"
              exit 1
            fi
            
            echo "[INFO] : Repository updated successfully"
            
            # Check configuration
            if [[ -f "config.yaml" ]]; then
              echo "[INFO] : Configuration file found"
            else
              echo "[WARN] : No configuration file found, indexer may fail to start"
            fi
            
            # Build Docker image
            echo "[INFO] : Building indexer Docker image"
            IMAGE_TAG="kizo-indexer:${{ needs.pre-checks.outputs.git-sha }}"
            if ! sudo docker build -t kizo-indexer:latest -t "$IMAGE_TAG" .; then
              echo "[ERROR] : Docker build failed"
              exit 1
            fi
            
            # Stop and remove old container
            echo "[INFO] : Stopping existing indexer container"
            sudo docker stop kizo-indexer 2>/dev/null || echo "[INFO] : No existing container to stop"
            sudo docker rm kizo-indexer 2>/dev/null || echo "[INFO] : No existing container to remove"
            
            # Start new container
            echo "[INFO] : Starting new indexer container"
            if ! sudo docker run -d \
              --name kizo-indexer \
              --network host \
              --restart unless-stopped \
              -v "$(pwd)/config.yaml:/app/config.yaml:ro" \
              --label "git-sha=${{ needs.pre-checks.outputs.git-sha }}" \
              --label "deployed-at=${{ needs.pre-checks.outputs.timestamp }}" \
              kizo-indexer:latest; then
              echo "[ERROR] : Failed to start indexer container"
              sudo docker logs kizo-indexer --tail 50 2>/dev/null || echo "[ERROR] : Cannot retrieve container logs"
              exit 1
            fi
            
            # Verify deployment
            echo "[INFO] : Verifying indexer deployment"
            sleep 20
            
            if sudo docker ps --filter "name=kizo-indexer" --filter "status=running" | grep -q kizo-indexer; then
              echo "[INFO] : Indexer container is running successfully"
              sudo docker logs kizo-indexer --tail 30
              
              # Extended health check
              echo "[INFO] : Performing extended health check"
              sleep 10
              
              # Check if process is running
              if sudo docker exec kizo-indexer ps aux | grep -q kizo-indexer; then
                echo "[INFO] : Indexer process is running inside container"
              else
                echo "[WARN] : Indexer process may not be running properly"
              fi
              
              # Check container stats
              echo "[INFO] : Container resource usage:"
              sudo docker stats kizo-indexer --no-stream --format "table {{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
              
            else
              echo "[ERROR] : Indexer container failed to start properly"
              echo "[ERROR] : Container logs:"
              sudo docker logs kizo-indexer --tail 100 2>/dev/null || echo "[ERROR] : Cannot retrieve logs"
              exit 1
            fi
            
            # Cleanup old images
            echo "[INFO] : Cleaning up old Docker images"
            sudo docker image prune -f
            
            echo "[INFO] : Indexer deployment completed successfully"
            echo "[INFO] : Deployment SHA: ${{ needs.pre-checks.outputs.git-sha }}"
            
            # Final status check
            echo "[INFO] : Final deployment status:"
            sudo docker ps --filter "name=kizo-indexer" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: '[INFO] : Post-deployment verification'
        run: |
          echo "[INFO] : Deployment completed"
          echo "[INFO] : Git SHA: ${{ needs.pre-checks.outputs.git-sha }}"
          echo "[INFO] : Deployed at: ${{ needs.pre-checks.outputs.timestamp }}"

  cleanup:
    name: 'Cleanup'
    runs-on: ubuntu-latest
    needs: [pre-checks, deploy]
    if: always()
    steps:
      - name: '[INFO] : Pipeline cleanup'
        run: |
          echo "[INFO] : Indexer pipeline execution completed"
          echo "[INFO] : Status: ${{ needs.deploy.result }}"
          if [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "[ERROR] : Indexer deployment failed - check logs above"
            exit 1
          fi
          echo "[INFO] : All indexer pipeline steps completed successfully"
